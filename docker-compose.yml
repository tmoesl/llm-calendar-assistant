services:
  # Redis Message Broker (shared by dev and prod)
  redis:
    image: redis:latest
    container_name: ${PROJECT_NAME}_redis
    command: redis-server --appendonly yes --appendfsync everysec
    ports:
      - "${REDIS_PORT}:6379"  # [HOST_PORT]:[CONTAINER_PORT] - Redis standard port
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
   
  # FastAPI Application - Development (with hot reload)
  api-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: ${PROJECT_NAME}_api_dev
    env_file: .env
    environment:
      - CALENDAR_TOKEN_PATH=tokens/token.json
      - LOG_LEVEL=DEBUG
      - CELERY_LOG_LEVEL=DEBUG
    ports:
      - "${API_PORT}:8080"    # [HOST_PORT]:[CONTAINER_PORT] - FastAPI server
    volumes:
      - ./app:/app/app        # Hot reload for source code
      - ./alembic:/app/alembic # Hot reload for migrations
      - ./logs:/app/logs
      - ./credentials.json:/app/credentials.json:ro  # OAuth credentials (never changes)
      - token_data:/app/tokens # Shared OAuth token directory (multi-container safe)
    depends_on:
      redis:
        condition: service_healthy
      celery-dev:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

  # FastAPI Application - Production
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: ${PROJECT_NAME}_api
    env_file: .env
    environment:
      - CALENDAR_TOKEN_PATH=tokens/token.json
    ports:
      - "${API_PORT}:8080"    # [HOST_PORT]:[CONTAINER_PORT] - FastAPI server
    volumes:
      - ./logs:/app/logs
      - ./credentials.json:/app/credentials.json:ro  # OAuth credentials (never changes)
      - token_data:/app/tokens # Shared OAuth token directory (multi-container safe)
    depends_on:
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["prod"]

  # Celery Worker - Development (with hot reload)
  celery-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    env_file: .env
    environment:
      - CALENDAR_TOKEN_PATH=tokens/token.json
      - LOG_LEVEL=DEBUG
      - CELERY_LOG_LEVEL=DEBUG
    volumes:
      - ./logs:/app/logs
      - ./app:/app/app        # Hot reload for source code
      - ./credentials.json:/app/credentials.json:ro  # OAuth credentials (never changes)
      - token_data:/app/tokens # Shared OAuth token directory (multi-container safe)
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

  # Celery Worker - Production
  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    env_file: .env
    environment:
      - CALENDAR_TOKEN_PATH=tokens/token.json
    volumes:
      - ./logs:/app/logs
      - ./credentials.json:/app/credentials.json:ro  # OAuth credentials (never changes)
      - token_data:/app/tokens # Shared OAuth token directory (multi-container safe)
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
    profiles: ["prod"]

  # Celery Flower (Development monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.flower
    container_name: ${PROJECT_NAME}_flower
    env_file: .env
    ports:
      - "${FLOWER_PORT}:5555"  # [HOST_PORT]:[CONTAINER_PORT] - Flower dashboard
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      celery-dev:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  token_data:
    driver: local

# Project-scoped network for service communication
networks:
  default:
    driver: bridge
    name: "${PROJECT_NAME}_network"